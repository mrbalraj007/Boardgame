name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'deployment-service.yaml'
  pull_request:
    branches: [ "main" ]

jobs:
  build-stage:
    name: Build & Test
    runs-on: self-hosted
    outputs:
      version: ${{ env.VERSION }}

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_GITHUB_PAT_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn package --file pom.xml

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: Boardgame
          path: target/*.jar

  security-scan-stage:
    name: Security Scanning
    needs: build-stage
    runs-on: self-hosted
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_GITHUB_PAT_TOKEN }}
          fetch-depth: 0
      
      - name: Trivy Installation
        run: |
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Trivy FS scan
        run: |
          trivy fs --format table -o fs.html .

      - name: Gitleaks Installation
        run: sudo apt install gitleaks -y

      - name: Gitleaks Code Scan
        run: gitleaks detect --source . -r gitleaks-report.json -f json

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
        
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  container-stage:
    name: Container Build & Push
    needs: security-scan-stage
    runs-on: self-hosted
    outputs:
      version: ${{ env.VERSION }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_GITHUB_PAT_TOKEN }}
          fetch-depth: 0
          
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: Boardgame
          path: target/
          
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Tag
        id: version
        run: |
          VERSION=v$(date +"%Y%m%d%H%M%S")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          docker build . -t balrajsi/boardgame:${{ env.VERSION }}

      - name: Trivy Image Scan
        run: |
          trivy image --format table -o trivy-image-report.html balrajsi/boardgame:${{ env.VERSION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Image
        run: docker push balrajsi/boardgame:${{ env.VERSION }}

  update-manifests-stage:
    name: Update Kubernetes Manifests
    needs: container-stage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_GITHUB_PAT_TOKEN }}
          fetch-depth: 0

      - name: Update K8s Manifests
        run: |
          cat deployment-service.yaml
          sed -i "s|image:.*|image: balrajsi/boardgame:${{ needs.container-stage.outputs.version }}|g" deployment-service.yaml
          cat deployment-service.yaml

      - name: Commit and push changes
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add deployment-service.yaml
          git commit -m "Update deployment-service.yaml with new image version - ${{ needs.container-stage.outputs.version }}" || echo "No changes to commit"
          echo "Pushing changes using PAT token..."
          git push "https://${{ secrets.MY_GITHUB_PAT_TOKEN }}@github.com/${{ github.repository }}" HEAD:main

  deploy-stage:
    name: Deploy to Kubernetes
    needs: update-manifests-stage
    runs-on: self-hosted
  
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
  
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest
  
      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.EKS_KUBECONFIG }}" > $HOME/.kube/config
  
      - name: Verify the context
        run: kubectl config view
  
      - name: To get the full role ARN
        run: aws sts get-caller-identity
  
      - name: Deploy to EKS
        run: kubectl apply -f deployment-service.yaml
  
      - name: Trigger Slack notification
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.MY_GITHUB_PAT_TOKEN }}
          event-type: maven-workflow-completed
          client-payload: '{"status": "success", "workflow_name": "Java CI with Maven", "repo": "${{ github.repository }}", "actor": "${{ github.actor }}", "ref_name": "${{ github.ref_name }}", "run_id": "${{ github.run_id }}"}'

  notify:
    name: Send Slack Notification
    needs: deploy-stage
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - name: Wait a moment for deployment to complete
        run: sleep 5
        
      - name: Trigger repository dispatch for Slack notification
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.MY_GITHUB_PAT_TOKEN }}
          event-type: maven-workflow-completed
          client-payload: '{"status": "success", "workflow_name": "Java CI with Maven", "repo": "${{ github.repository }}", "actor": "${{ github.actor }}", "ref_name": "${{ github.ref_name }}", "run_id": "${{ github.run_id }}"}'
